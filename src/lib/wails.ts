// Wails Go backend function bindings
// These would typically be auto-generated by Wails build process

export interface NodeStats {
  peerId: string
  status: 'online' | 'offline' | 'connecting'
  connectedPeers: number
  sharedFiles: number
  networkLatency: number
  uptime: number
}

export interface Peer {
  id: string
  address: string
  status: 'online' | 'offline' | 'connecting'
  latency: number
  filesShared: number
  lastSeen: string
  location?: string
  bandwidth?: string
}

export interface FileInfo {
  id: string
  name: string
  type: 'file' | 'folder'
  size: string | number
  shared: boolean
  lastModified: string
  hash?: string
  path?: string
}

export interface SearchResult {
  id: string
  name: string
  similarity: number
  size: string
  peer: string
  type: string
  hash: string
  embedding?: number[]
}

export interface NetworkMetrics {
  dhtSize: number
  bucketUtilization: number
  messagesSent: number
  messagesReceived: number
  routingTableSize: number
  activeConnections: number
}

export interface ActivityItem {
  id: string
  type: 'upload' | 'download' | 'search' | 'peer_connect' | 'peer_disconnect' | 'error'
  title: string
  timestamp: string
  status: 'completed' | 'in_progress' | 'failed'
  details?: any
}

export interface NetworkEvent {
  id: string
  type: string
  message: string
  timestamp: string
  severity: 'info' | 'success' | 'warning' | 'error'
}

// Wails backend API functions
declare global {
  interface Window {
    go: {
      main: {
        App: {
          // Node management
          GetNodeStats(): Promise<NodeStats>
          GetNodeInfo(): Promise<any>
          StartNode(): Promise<boolean>
          StopNode(): Promise<boolean>
          
          // Peer management
          GetConnectedPeers(): Promise<Peer[]>
          ConnectToPeer(address: string): Promise<boolean>
          DisconnectFromPeer(peerId: string): Promise<boolean>
          GetPeerInfo(peerId: string): Promise<Peer>
          
          // File management
          GetSharedFiles(): Promise<FileInfo[]>
          ShareFile(filePath: string): Promise<boolean>
          UnshareFile(fileId: string): Promise<boolean>
          DownloadFile(hash: string, peerId: string): Promise<boolean>
          UploadFile(filePath: string): Promise<string>
          
          // Search functionality
          SearchByEmbedding(query: string, threshold: number): Promise<SearchResult[]>
          SearchByKeyword(query: string): Promise<SearchResult[]>
          GetSearchHistory(): Promise<any[]>
          
          // Network analytics
          GetNetworkMetrics(): Promise<NetworkMetrics>
          GetRoutingTable(): Promise<any>
          GetDHTStats(): Promise<any>
          
          // Activity and events
          GetRecentActivity(): Promise<ActivityItem[]>
          GetNetworkEvents(): Promise<NetworkEvent[]>
          
          // Configuration
          UpdateConfig(config: any): Promise<boolean>
          GetConfig(): Promise<any>
        }
      }
    }
  }
}

// Export the Go bindings for use in components
export const WailsAPI = {
  // Node operations
  getNodeStats: () => window.go?.main?.App?.GetNodeStats?.() || Promise.resolve(null),
  startNode: () => window.go?.main?.App?.StartNode?.() || Promise.resolve(false),
  stopNode: () => window.go?.main?.App?.StopNode?.() || Promise.resolve(false),
  
  // Peer operations
  getConnectedPeers: () => window.go?.main?.App?.GetConnectedPeers?.() || Promise.resolve([]),
  connectToPeer: (address: string) => window.go?.main?.App?.ConnectToPeer?.call(null, address) || Promise.resolve(false),
  disconnectFromPeer: (peerId: string) => window.go?.main?.App?.DisconnectFromPeer?.call(null, peerId) || Promise.resolve(false),
  
  // File operations
  getSharedFiles: () => window.go?.main?.App?.GetSharedFiles?.() || Promise.resolve([]),
  shareFile: (filePath: string) => window.go?.main?.App?.ShareFile?.call(null, filePath) || Promise.resolve(false),
  unshareFile: (fileId: string) => window.go?.main?.App?.UnshareFile?.call(null, fileId) || Promise.resolve(false),
  uploadFile: (filePath: string) => window.go?.main?.App?.UploadFile?.call(null, filePath) || Promise.resolve(''),
  downloadFile: (hash: string, peerId: string) => window.go?.main?.App?.DownloadFile?.call(null, hash, peerId) || Promise.resolve(false),
  
  // Search operations
  searchByEmbedding: (query: string, threshold: number) => window.go?.main?.App?.SearchByEmbedding?.call(null, query, threshold) || Promise.resolve([]),
  searchByKeyword: (query: string) => window.go?.main?.App?.SearchByKeyword?.call(null, query) || Promise.resolve([]),
  
  // Network analytics
  getNetworkMetrics: () => window.go?.main?.App?.GetNetworkMetrics?.() || Promise.resolve(null),
  getRecentActivity: () => window.go?.main?.App?.GetRecentActivity?.() || Promise.resolve([]),
  getNetworkEvents: () => window.go?.main?.App?.GetNetworkEvents?.() || Promise.resolve([]),
}